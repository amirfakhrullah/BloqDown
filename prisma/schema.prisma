// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Post {
  id      String   @id @default(cuid())
  created DateTime @default(now())

  userToken String @db.VarChar(255)

  githubUser User?   @relation(fields: [userEmail], references: [email])
  userEmail  String?

  title       String @db.VarChar(200)
  description String @db.VarChar(2000)

  updated DateTime?

  views Int @default(0)

  Comment Comment[]
  tags    Tag[]

  likes Like[]

  @@index([userToken])
}

model Comment {
  id      String   @id @default(cuid())
  created DateTime @default(now())

  text String @db.VarChar(200)

  userToken String @db.VarChar(255)

  githubUser User?   @relation(fields: [userEmail], references: [email])
  userEmail  String?

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@index([userToken])
  @@index([postId])
}

model Like {
  id      String   @id @default(cuid())
  created DateTime @default(now())

  userToken String @db.VarChar(255)

  githubUser User?   @relation(fields: [userEmail], references: [email])
  userEmail  String?

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, userEmail])
  @@unique([postId, userToken])
}

model Tag {
  tagName String @db.VarChar(20)

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, tagName])
}

// Next-Auth stuffs
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts    Post[]
  comments Comment[]
  likes    Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
